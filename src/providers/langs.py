from ..vendor import pycountry

# All languages supported by the add-on (https://downloads.tatoeba.org/exports/per_language/)
ALL_LANGS = [
    "abk",
    "abq",
    "acm",
    "ady",
    "afb",
    "afh",
    "afr",
    "aii",
    "ain",
    "ajp",
    "akl",
    "aln",
    "alt",
    "amh",
    "ang",
    "aoz",
    "apc",
    "ara",
    "arg",
    "arn",
    "arq",
    "ary",
    "arz",
    "asm",
    "ast",
    "ava",
    "avk",
    "awa",
    "ayl",
    "aym",
    "aze",
    "bak",
    "bal",
    "bam",
    "ban",
    "bar",
    "bcl",
    "bel",
    "ben",
    "ber",
    "bfz",
    "bho",
    "bis",
    "bjn",
    "bod",
    "bom",
    "bos",
    "bre",
    "brx",
    "bua",
    "bul",
    "bvy",
    "bzt",
    "cat",
    "cay",
    "cbk",
    "ceb",
    "ces",
    "cha",
    "che",
    "chg",
    "chn",
    "cho",
    "chr",
    "chv",
    "cjy",
    "ckb",
    "ckt",
    "cmn",
    "cmo",
    "cor",
    "cos",
    "cpi",
    "crh",
    "crk",
    "crs",
    "csb",
    "cycl",
    "cym",
    "cyo",
    "dan",
    "dar",
    "deu",
    "diq",
    "div",
    "dng",
    "drt",
    "dsb",
    "dtp",
    "dws",
    "egl",
    "ell",
    "emx",
    "eng",
    "enm",
    "epo",
    "est",
    "eus",
    "evn",
    "ewe",
    "ext",
    "fao",
    "fij",
    "fin",
    "fkv",
    "fra",
    "frm",
    "fro",
    "frr",
    "fry",
    "fuc",
    "fur",
    "fuv",
    "gaa",
    "gag",
    "gan",
    "gaz",
    "gbm",
    "gcf",
    "gil",
    "gla",
    "gle",
    "glg",
    "glv",
    "gom",
    "gos",
    "got",
    "grc",
    "grn",
    "gsw",
    "guc",
    "guj",
    "guw",
    "hak",
    "hat",
    "hau",
    "haw",
    "hax",
    "hbo",
    "hdn",
    "heb",
    "hif",
    "hil",
    "hin",
    "hnj",
    "hoc",
    "hrv",
    "hrx",
    "hsb",
    "hsn",
    "hun",
    "hye",
    "hyw",
    "iba",
    "ibo",
    "ido",
    "igs",
    "iii",
    "ike",
    "ile",
    "ilo",
    "ina",
    "ind",
    "inh",
    "isl",
    "isv",
    "ita",
    "izh",
    "jam",
    "jav",
    "jbo",
    "jdt",
    "jpa",
    "jpn",
    "kaa",
    "kab",
    "kal",
    "kam",
    "kan",
    "kas",
    "kat",
    "kaz",
    "kbd",
    "kek",
    "kha",
    "khm",
    "kin",
    "kir",
    "kiu",
    "kjh",
    "klj",
    "kmr",
    "knc",
    "koi",
    "kor",
    "kpv",
    "krc",
    "krl",
    "ksh",
    "kum",
    "kxi",
    "kzj",
    "laa",
    "lad",
    "lao",
    "lat",
    "lbe",
    "ldn",
    "lez",
    "lfn",
    "lij",
    "lim",
    "lin",
    "lit",
    "liv",
    "lkt",
    "lld",
    "lmo",
    "lou",
    "ltg",
    "ltz",
    "lug",
    "lut",
    "lvs",
    "lzh",
    "lzz",
    "mad",
    "mah",
    "mai",
    "mal",
    "mar",
    "max",
    "mdf",
    "mdr",
    "mfa",
    "mfe",
    "mgm",
    "mhr",
    "mic",
    "mik",
    "min",
    "mkd",
    "mlg",
    "mlt",
    "mnc",
    "mni",
    "mnr",
    "mnw",
    "moh",
    "mon",
    "mri",
    "mrj",
    "mus",
    "mvv",
    "mwl",
    "mww",
    "mya",
    "myv",
    "nah",
    "nan",
    "nap",
    "nau",
    "nav",
    "nch",
    "nds",
    "new",
    "ngt",
    "ngu",
    "niu",
    "njo",
    "nld",
    "nlv",
    "nnb",
    "nno",
    "nob",
    "nog",
    "non",
    "nov",
    "npi",
    "nst",
    "nus",
    "nya",
    "nys",
    "oar",
    "oci",
    "ofs",
    "oji",
    "ood",
    "ori",
    "orv",
    "osp",
    "oss",
    "osx",
    "ota",
    "otk",
    "pag",
    "pal",
    "pam",
    "pan",
    "pap",
    "pau",
    "pcd",
    "pdc",
    "pes",
    "pfl",
    "phn",
    "pli",
    "pms",
    "pnb",
    "pol",
    "por",
    "ppl",
    "prg",
    "pus",
    "quc",
    "que",
    "qxq",
    "qya",
    "rap",
    "rel",
    "rhg",
    "rif",
    "roh",
    "rom",
    "ron",
    "rue",
    "run",
    "rus",
    "ryu",
    "sag",
    "sah",
    "san",
    "sat",
    "scn",
    "sco",
    "sdh",
    "sgs",
    "shi",
    "shs",
    "shy",
    "sin",
    "sjn",
    "skr",
    "slk",
    "slv",
    "sma",
    "sme",
    "smo",
    "sna",
    "snd",
    "som",
    "sot",
    "spa",
    "sqi",
    "srd",
    "srn",
    "srp",
    "ssw",
    "stq",
    "sun",
    "sux",
    "sva",
    "swc",
    "swe",
    "swg",
    "swh",
    "syc",
    "syl",
    "szl",
    "tah",
    "tam",
    "tat",
    "tel",
    "tet",
    "tgk",
    "tgl",
    "tha",
    "thv",
    "tig",
    "tir",
    "tkl",
    "tlh",
    "tly",
    "tmr",
    "tmw",
    "toi",
    "tok",
    "ton",
    "tpi",
    "tpn",
    "tsn",
    "tso",
    "tts",
    "tuk",
    "tum",
    "tur",
    "tvl",
    "tyv",
    "tzl",
    "udm",
    "uig",
    "ukr",
    "umb",
    "urd",
    "urh",
    "uzb",
    "vec",
    "vep",
    "vie",
    "vol",
    "vro",
    "war",
    "wln",
    "wol",
    "wuu",
    "xal",
    "xho",
    "xmf",
    "xqa",
    "yid",
    "yor",
    "yua",
    "yue",
    "zea",
    "zgh",
    "zlm",
    "zsm",
    "zul",
    "zza",
]


def get_language_info(lang_code: str) -> pycountry.db.Country | None:
    return pycountry.languages.get(alpha_2=lang_code) or pycountry.languages.get(
        alpha_3=lang_code
    )


def langcode_to_name(lang_code: str) -> str:
    try:
        return get_language_info(lang_code).name
    except AttributeError:
        return lang_code


def get_all_languages() -> list[tuple[str, str]]:
    return [(code, langcode_to_name(code)) for code in ALL_LANGS]
